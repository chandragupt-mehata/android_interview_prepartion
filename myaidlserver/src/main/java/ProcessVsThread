https://www.shiksha.com/online-courses/articles/difference-between-process-and-thread/#:~:text=A%20process%20is%20an%20independent,maintaining%20its%20own%20execution%20sequence.

/**
 * https://www.youtube.com/watch?v=4rLW7zg21gI
 * https://app.pluralsight.com/ilx/video-courses/1df9b18d-34cc-4061-94be-c1ab36113db4/7bad0db5-36a3-467d-8dc8-0312ee72b465/30f97651-3649-428a-8b3f-bf4d47c3bdab
 *
 * What is Process?
 * A process is an instance of a program that is being executed. When we run a program, it does not execute directly.
 * It takes some time to follow all the steps required to execute the program, and following these execution steps is known as a process.
 * In short - An independent unit of execution containing its own memory space.
 * Has its own separate memory space.
 * Higher overhead due to separate memory and resource allocation.
 * Operates independently.
 * Communicates through IPC mechanisms.
 * Each process has its own resources (files, variables, stack, heap, pointer, register etc.).
 * One process can not corrupt other process memory space as each will have their own memory.Ex: Google chrome -
 * which run each tab in diff process.
 *
 * A process can create other processes to perform multiple tasks at a time; the created processes are known as clone or
 * child process, and the main process is known as the parent process. Each process contains its own memory space and does not share
 * it with the other processes. It is known as the active entity. A typical process remains in the below form in memory.
 *
 * Android is based on linux so “the Android system starts a new Linux process for the application with
 * a single thread of execution. By default, all components of the same application run in the same process and thread (called the “main” thread).”
 *
 * A thread is the subset of a process and is also known as the lightweight process. A process can have more than one thread,
 * and these threads are managed independently by the scheduler. All the threads within one process are interrelated to each other.
 * In short - A lightweight, executable unit within a process.
 * Shares memory space with other threads within the same process.
 * Lower overhead, more efficient in resource usage.
 * Depends on the process; multiple threads can run in parallel within one process.
 * Communicates directly through shared memory.
 * Share resources of the process they belong to.
 *
 * *****
 * Thread wrt stack
 * What about thread? How does they access memory of process wrt stack, heap etc?
 *
 * ChatGPT
 * Threads within the same process share the same heap but have their own stacks. Here's how it works:
 *
 * Heap: All threads in a process share the same heap memory. This means they can access and modify the same objects and data stored in the heap. This
 * shared access necessitates synchronization mechanisms (like synchronized blocks or locks) to prevent concurrent modification issues.
 *
 * Stack: Each thread has its own stack. The stack stores the thread's local variables, method call information, and control flow. Since each thread
 * has its own stack, local variables are not shared between threads.
 *
 */







Starting from Android O (API level 26), the system imposes restrictions on background services to improve battery life and overall performance. This makes choosing the right background processing component even more crucial. Here’s how the updated guidelines fit into the context of Android O and beyond:

1. Thread
Threads can still be used for short-lived, immediate tasks, but you need to ensure that they are properly managed to avoid leaks and resource exhaustion.

2. Service
Foreground Services: Use Foreground Service if the task must continue running even when the app is not in the foreground. This type of service shows a notification to the user to indicate that it's running, and thus the system is less likely to kill it.

Use Case: Playing music, tracking location.
Background Services: For non-foreground tasks, you should generally avoid using Service because of restrictions. Instead, consider using JobIntentService or WorkManager.

3. JobIntentService
When to Use: Use JobIntentService as a replacement for IntentService if you need background execution that respects the system’s restrictions on background services.

Use Case: Handling asynchronous tasks that need to be completed but can be deferred and don’t need immediate execution.
Benefits: It queues work and executes it using the JobScheduler when the system is ready, ensuring compliance with the background execution limits.

4. WorkManager
When to Use: WorkManager is highly recommended for background tasks that need guaranteed execution, respecting system constraints and lifecycle changes.

Use Case: Periodic data syncing, deferred background processing, tasks with constraints.
Benefits:

Guaranteed Execution: Ensures tasks are executed even if the app is killed or the device restarts.
Constraint Management: Handles network constraints, battery status, etc., automatically.
Compatibility: Automatically uses the best available scheduler based on the API level (e.g., JobScheduler on newer APIs, AlarmManager and BroadcastReceiver on older ones).
Summary Updated for Android O and Beyond
Thread: Still suitable for short-lived tasks, but manage lifecycle carefully to avoid leaks.
Foreground Service: Use for long-running tasks that need to show a notification and run continuously.
JobIntentService: Use for tasks that need background execution but are not suitable for Foreground Service. It ensures compatibility with the background execution limits of Android O and beyond.
WorkManager: Preferred for most background tasks that require guaranteed execution, constraint handling, and compatibility with various API levels.


